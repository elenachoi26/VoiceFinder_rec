# -*- coding: utf-8 -*-
"""content-based.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qXBkVF4CqgQBolsX8FNoLdIiyklOvZbS

# 1. LOAD + 음식 data 전처리
"""

import pandas as pd
import numpy as np

#df_merged = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/voiceFinder/df_merged.csv')
#df_merged['market_id'].duplicated().sum()
#df_merged.drop_duplicates(['market_id'], inplace = True)

sample_data = pd.read_csv('./sample_data.csv')
sample_data['market_id'] = sample_data['market_id'].astype(int)

"""# 2. market profile 구성"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# TF-IDF 벡터화
tfidf_vectorizer_menu = TfidfVectorizer()
tfidf_matrix_menu = tfidf_vectorizer_menu.fit_transform(sample_data['menu'])

tfidf_vectorizer_ingredient = TfidfVectorizer()
tfidf_matrix_ingredient = tfidf_vectorizer_ingredient.fit_transform(sample_data['ingredient'])

def filter_markets(data, cannot_eat_vec, feature_names):
    df_cleaned = data.copy()
    for idx, food in enumerate(feature_names):
        if cannot_eat_vec[0, idx] > 0:  # cannot_eat 벡터에서 해당 음식 항목의 값이 0보다 큰 경우
            df_cleaned = df_cleaned[~df_cleaned['ingredient'].str.contains(food)]
    return df_cleaned

def get_recommendations(user_profiles, n_cnt):
    # 사용자 가져오기
    
    print(f"fav food is : {[user_profiles['fav_food']]}")
    print(f"cannot_eat food is : {[user_profiles['cannot_eat']]}")

    user_fav_vector = tfidf_vectorizer_menu.transform([user_profiles['fav_food']])

    cannot_eat_vector = tfidf_vectorizer_ingredient.transform([user_profiles['cannot_eat']])
    feature_names = tfidf_vectorizer_ingredient.get_feature_names_out()

    filtered_markets = filter_markets(sample_data, cannot_eat_vector, feature_names)

    if filtered_markets.empty:
            return pd.DataFrame()  # 필터링 후 남은 음식점이 없는 경우 빈 데이터프레임 반환

    # 필터링된 음식점 메뉴 벡터화
    filtered_tfidf_matrix_menu = tfidf_vectorizer_menu.transform(filtered_markets['menu'])

    # 코사인 유사도 계산
    cosine_similarities = cosine_similarity(user_fav_vector, filtered_tfidf_matrix_menu).flatten()

    # 예측 평점 벡터 생성
    recommendation_scores = pd.Series(cosine_similarities, index=filtered_markets['market_id'])

    return recommendation_scores